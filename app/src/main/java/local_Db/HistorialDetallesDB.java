package local_Db;

import java.io.Serializable;

import local_Db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table HISTORIAL_DETALLES_DB.
 */
public class HistorialDetallesDB implements Serializable {

    private Long id;
    private Integer idhistorial;
    private String parametro;
    private String valor;
    private Long ordenId;
    private Long hitorialId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient HistorialDetallesDBDao myDao;

    private OrdenDB ordenDB;
    private Long ordenDB__resolvedKey;


    public HistorialDetallesDB() {
    }

    public HistorialDetallesDB(Long id) {
        this.id = id;
    }

    public HistorialDetallesDB(Long id, Integer idhistorial, String parametro, String valor, Long ordenId, Long hitorialId) {
        this.id = id;
        this.idhistorial = idhistorial;
        this.parametro = parametro;
        this.valor = valor;
        this.ordenId = ordenId;
        this.hitorialId = hitorialId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getHistorialDetallesDBDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getIdhistorial() {
        return idhistorial;
    }

    public void setIdhistorial(Integer idhistorial) {
        this.idhistorial = idhistorial;
    }

    public String getParametro() {
        return parametro;
    }

    public void setParametro(String parametro) {
        this.parametro = parametro;
    }

    public String getValor() {
        return valor;
    }

    public void setValor(String valor) {
        this.valor = valor;
    }

    public Long getOrdenId() {
        return ordenId;
    }

    public void setOrdenId(Long ordenId) {
        this.ordenId = ordenId;
    }

    public Long getHitorialId() {
        return hitorialId;
    }

    public void setHitorialId(Long hitorialId) {
        this.hitorialId = hitorialId;
    }

    /** To-one relationship, resolved on first access. */
    public OrdenDB getOrdenDB() {
        Long __key = this.ordenId;
        if (ordenDB__resolvedKey == null || !ordenDB__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OrdenDBDao targetDao = daoSession.getOrdenDBDao();
            OrdenDB ordenDBNew = targetDao.load(__key);
            synchronized (this) {
                ordenDB = ordenDBNew;
            	ordenDB__resolvedKey = __key;
            }
        }
        return ordenDB;
    }

    public void setOrdenDB(OrdenDB ordenDB) {
        synchronized (this) {
            this.ordenDB = ordenDB;
            ordenId = ordenDB == null ? null : ordenDB.getId();
            ordenDB__resolvedKey = ordenId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
