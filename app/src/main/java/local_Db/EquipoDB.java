package local_Db;

import java.io.Serializable;

import local_Db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table EQUIPO_DB.
 */
public class EquipoDB implements Serializable{

    private Long id;
    private Integer idEquipo;
    private String numeroEquipo;
    private Integer listaNombreEquipoIdListaNombre;
    private String codigoBarras;
    private long lugarID;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient EquipoDBDao myDao;

    private LugarDB lugarDB;
    private Long lugarDB__resolvedKey;


    public EquipoDB() {
    }

    public EquipoDB(Long id) {
        this.id = id;
    }

    public EquipoDB(Long id, Integer idEquipo, String numeroEquipo, Integer listaNombreEquipoIdListaNombre, String codigoBarras, long lugarID) {
        this.id = id;
        this.idEquipo = idEquipo;
        this.numeroEquipo = numeroEquipo;
        this.listaNombreEquipoIdListaNombre = listaNombreEquipoIdListaNombre;
        this.codigoBarras = codigoBarras;
        this.lugarID = lugarID;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getEquipoDBDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getIdEquipo() {
        return idEquipo;
    }

    public void setIdEquipo(Integer idEquipo) {
        this.idEquipo = idEquipo;
    }

    public String getNumeroEquipo() {
        return numeroEquipo;
    }

    public void setNumeroEquipo(String numeroEquipo) {
        this.numeroEquipo = numeroEquipo;
    }

    public Integer getListaNombreEquipoIdListaNombre() {
        return listaNombreEquipoIdListaNombre;
    }

    public void setListaNombreEquipoIdListaNombre(Integer listaNombreEquipoIdListaNombre) {
        this.listaNombreEquipoIdListaNombre = listaNombreEquipoIdListaNombre;
    }

    public String getCodigoBarras() {
        return codigoBarras;
    }

    public void setCodigoBarras(String codigoBarras) {
        this.codigoBarras = codigoBarras;
    }

    public long getLugarID() {
        return lugarID;
    }

    public void setLugarID(long lugarID) {
        this.lugarID = lugarID;
    }

    /** To-one relationship, resolved on first access. */
    public LugarDB getLugarDB() {
        long __key = this.lugarID;
        if (lugarDB__resolvedKey == null || !lugarDB__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LugarDBDao targetDao = daoSession.getLugarDBDao();
            LugarDB lugarDBNew = targetDao.load(__key);
            synchronized (this) {
                lugarDB = lugarDBNew;
            	lugarDB__resolvedKey = __key;
            }
        }
        return lugarDB;
    }

    public void setLugarDB(LugarDB lugarDB) {
        if (lugarDB == null) {
            throw new DaoException("To-one property 'lugarID' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.lugarDB = lugarDB;
            lugarID = lugarDB.getId();
            lugarDB__resolvedKey = lugarID;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
