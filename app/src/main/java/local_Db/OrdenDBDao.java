package local_Db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import local_Db.OrdenDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ORDEN_DB.
*/
public class OrdenDBDao extends AbstractDao<OrdenDB, Long> {

    public static final String TABLENAME = "ORDEN_DB";

    /**
     * Properties of entity OrdenDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdOrden = new Property(1, Integer.class, "idOrden", false, "ID_ORDEN");
        public final static Property Descripcion = new Property(2, String.class, "descripcion", false, "DESCRIPCION");
        public final static Property Status = new Property(3, Integer.class, "status", false, "STATUS");
        public final static Property NumeroOrden = new Property(4, String.class, "numeroOrden", false, "NUMERO_ORDEN");
        public final static Property Prioridad = new Property(5, String.class, "prioridad", false, "PRIORIDAD");
        public final static Property Actividad = new Property(6, String.class, "actividad", false, "ACTIVIDAD");
        public final static Property Encargado = new Property(7, String.class, "encargado", false, "ENCARGADO");
        public final static Property EquipoId = new Property(8, Long.class, "equipoId", false, "EQUIPO_ID");
        public final static Property OrdenId = new Property(9, Long.class, "ordenId", false, "ORDEN_ID");
    };

    private DaoSession daoSession;

    private Query<OrdenDB> lugarDB_OrdenDBListQuery;

    public OrdenDBDao(DaoConfig config) {
        super(config);
    }
    
    public OrdenDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ORDEN_DB' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'ID_ORDEN' INTEGER," + // 1: idOrden
                "'DESCRIPCION' TEXT," + // 2: descripcion
                "'STATUS' INTEGER," + // 3: status
                "'NUMERO_ORDEN' TEXT," + // 4: numeroOrden
                "'PRIORIDAD' TEXT," + // 5: prioridad
                "'ACTIVIDAD' TEXT," + // 6: actividad
                "'ENCARGADO' TEXT," + // 7: encargado
                "'EQUIPO_ID' INTEGER," + // 8: equipoId
                "'ORDEN_ID' INTEGER);"); // 9: ordenId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ORDEN_DB'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OrdenDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer idOrden = entity.getIdOrden();
        if (idOrden != null) {
            stmt.bindLong(2, idOrden);
        }
 
        String descripcion = entity.getDescripcion();
        if (descripcion != null) {
            stmt.bindString(3, descripcion);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(4, status);
        }
 
        String numeroOrden = entity.getNumeroOrden();
        if (numeroOrden != null) {
            stmt.bindString(5, numeroOrden);
        }
 
        String prioridad = entity.getPrioridad();
        if (prioridad != null) {
            stmt.bindString(6, prioridad);
        }
 
        String actividad = entity.getActividad();
        if (actividad != null) {
            stmt.bindString(7, actividad);
        }
 
        String encargado = entity.getEncargado();
        if (encargado != null) {
            stmt.bindString(8, encargado);
        }
 
        Long equipoId = entity.getEquipoId();
        if (equipoId != null) {
            stmt.bindLong(9, equipoId);
        }
 
        Long ordenId = entity.getOrdenId();
        if (ordenId != null) {
            stmt.bindLong(10, ordenId);
        }
    }

    @Override
    protected void attachEntity(OrdenDB entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public OrdenDB readEntity(Cursor cursor, int offset) {
        OrdenDB entity = new OrdenDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // idOrden
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // descripcion
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // status
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // numeroOrden
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // prioridad
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // actividad
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // encargado
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // equipoId
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // ordenId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OrdenDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdOrden(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setDescripcion(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStatus(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setNumeroOrden(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPrioridad(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setActividad(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEncargado(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEquipoId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setOrdenId(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(OrdenDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(OrdenDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "ordenDBList" to-many relationship of LugarDB. */
    public List<OrdenDB> _queryLugarDB_OrdenDBList(Long ordenId) {
        synchronized (this) {
            if (lugarDB_OrdenDBListQuery == null) {
                QueryBuilder<OrdenDB> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.OrdenId.eq(null));
                lugarDB_OrdenDBListQuery = queryBuilder.build();
            }
        }
        Query<OrdenDB> query = lugarDB_OrdenDBListQuery.forCurrentThread();
        query.setParameter(0, ordenId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getEquipoDBDao().getAllColumns());
            builder.append(" FROM ORDEN_DB T");
            builder.append(" LEFT JOIN EQUIPO_DB T0 ON T.'EQUIPO_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected OrdenDB loadCurrentDeep(Cursor cursor, boolean lock) {
        OrdenDB entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        EquipoDB equipoDB = loadCurrentOther(daoSession.getEquipoDBDao(), cursor, offset);
        entity.setEquipoDB(equipoDB);

        return entity;    
    }

    public OrdenDB loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<OrdenDB> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<OrdenDB> list = new ArrayList<OrdenDB>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<OrdenDB> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<OrdenDB> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
